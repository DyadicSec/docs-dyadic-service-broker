---
title: Using Dyadic EKM Service Broker for PCF
owner: Partners
---

After the operator has installed and configured the tile, the Dyadic EKM Service Broker is ready for use.
To use the Dyadic EKM Service Broker for key management, a developer creates the service instance and binds it to their app.

##<a id='bind'></a> Bind Your App to the Dyadic EKM Service Broker for PCF

1. Confirm that you have pushed your app using the Dyadic buildpack:
   <pre class="terminal">$ cf push APP-NAME .... -b dyadic_buildpack</pre>

1. Enable access to the service:
   <pre class="terminal">$ cf enable-service-access dyadic-ekm</pre>

1. Create EKM service instance:
   <pre class="terminal">$ cf create-service dyadic-ekm default SERVICE-INSTANCE-NAME</pre>

1. Bind your app to service instance:
   <pre class="terminal">$ cf bind-service APP-NAME SERVICE-INSTANCE-NAME</pre>

1. Verify the the app environments variable are correct:
   <pre class="terminal">$ cf env APP-NAME</pre>

1. If your app is running, restage it:
   <pre class="terminal">$ cf restage APP-NAME</pre>

1. If you haven't run your app before, start it:
   <pre class="terminal">$ cf start APP-NAME</pre>

##<a id="code-sample"></a> Code Samples for Java Developers  

You will now be able to perform different crypto operations within the Dyadic EKM system. 
Below are code samples of using the Dyadic EKM Java provider for different common use cases.

The class ```java com.dyadicsec.provider.DYCryptoProvider ``` implements the provider. Use either the ```java java.security file ``` (see the [JCA documentation](https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html) for details) or create a new ```java DYCryptoProvider``` object in code to add the Dyadic provider to your application. Then enable its use using the following: 
```java 
Security.addProvider(new DYCryptoProvider());

```

After the new provider is added to the list of providers, use the Dyadic provider name “DYADIC” to create instances of <mark>KeyStore</mark>, <mark>KeyGenerator</mark> and <mark>Cipher</mark> classes, which will use the underlying EKM functionality to persist keys and run crypto operations. The DYADIC <mark>KeyStore</mark> type is <mark>“PKCS11”</mark>.

Follow the standard [JCA documentation](https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html) to use <mark>KeyStore</mark>, <mark>KeyGenerator</mark> and <mark>Cipher</mark> for generating keys.


### RSA

The following code sample demonstrates RSA for signing and encryption:

```java
byte[] testData = new byte[]{1, 2, 3, 4, 5};

Security.addProvider(new DYCryptoProvider());
KeyStore keyStore = KeyStore.getInstance("PKCS11", "DYADIC");
keyStore.load(null);

KeyPairGenerator gen = KeyPairGenerator.getInstance("RSA", "DYADIC");
gen.initialize(2048);
KeyPair keyPair = gen.generateKeyPair();

keyStore.setEntry("RSA test", new DYCryptoProvider.KeyEntry(keyPair.getPrivate()), null);
PrivateKey prvKey = (PrivateKey) keyStore.getKey("RSA test", null);

Signature sign = Signature.getInstance("SHA256WithRSA", "DYADIC");
sign.initSign(prvKey);
sign.update(testData);
byte[] signature = sign.sign();

sign = Signature.getInstance("SHA256WithRSA");
RSAPrivateCrtKey rsa = (RSAPrivateCrtKey) prvKey;
KeyFactory kf = KeyFactory.getInstance("RSA");
PublicKey pubKey = kf.generatePublic(new RSAPublicKeySpec(rsa.getModulus(), rsa.getPublicExponent()));
sign.initVerify(pubKey);
sign.update(testData);
boolean ok = sign.verify(signature);

Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWITHSHA-1ANDMGF1PADDING");
cipher.init(Cipher.ENCRYPT_MODE, pubKey);
byte[] encrypted = cipher.doFinal(testData);
cipher = Cipher.getInstance("RSA/ECB/OAEPWITHSHA-1ANDMGF1PADDING", "DYADIC");
cipher.init(Cipher.DECRYPT_MODE, prvKey);
byte[] decrypted = cipher.doFinal(encrypted);
ok = Arrays.equals(decrypted, testData);

```

### ECDSA

The following code sample demonstrates ECDSA key generation and signature:

```java
Security.addProvider(new DYCryptoProvider());
KeyStore keyStore = KeyStore.getInstance("PKCS11", "DYADIC");
keyStore.load(null);

KeyPairGenerator gen = KeyPairGenerator.getInstance("EC", "DYADIC");
gen.initialize(new ECGenParameterSpec("secp256r1"));
KeyPair keyPair = gen.generateKeyPair();

keyStore.setEntry("ECDSA test",
		new DYCryptoProvider.KeyEntry(keyPair.getPrivate()), null);
PrivateKey prvKey = (PrivateKey) keyStore.getKey("ECDSA test", null);

byte[] testData = new byte[] { 1, 2, 3, 4, 5 };

Signature sign = Signature.getInstance("SHA256WithECDSA", "DYADIC");
sign.initSign(prvKey);
sign.update(testData);
byte[] signature = sign.sign();

sign = Signature.getInstance("SHA256WithECDSA");
sign.initVerify(keyPair.getPublic());
sign.update(testData);
boolean ok = sign.verify(signature);

```

### AES

The following code sample demonstrates AES key generation and usage:

```java
Security.addProvider(new DYCryptoProvider());
KeyStore keyStore = KeyStore.getInstance("PKCS11", "DYADIC");
keyStore.load(null);

KeyGenerator gen = KeyGenerator.getInstance("AES", "DYADIC");
gen.init(256);
SecretKey secretKey = (SecretKey) gen.generateKey();
keyStore.setKeyEntry("AES test", secretKey, null, null);

SecureRandom secureRandom = new SecureRandom();
byte[] data = new byte[64];
byte[] iv = new byte[12];
byte[] AD = new byte[12];
secureRandom.nextBytes(data);
secureRandom.nextBytes(data);
secureRandom.nextBytes(iv);
secureRandom.nextBytes(AD);
CcmParameterSpec ccmParameterSpec = new CcmParameterSpec(iv, 12, AD);
Cipher encryptCipherEncrypt = Cipher.getInstance("AES/CCM/NoPadding");
encryptCipherEncrypt.init(Cipher.ENCRYPT_MODE, secretKey, ccmParameterSpec);
encryptCipherEncrypt.update(data, 0, data.length / 2);
encryptCipherEncrypt.update(data, data.length / 2, data.length / 2);
byte[] enc = encryptCipherEncrypt.doFinal();
Cipher encryptCipherDecrypt = Cipher.getInstance("AES/CCM/NoPadding");
encryptCipherDecrypt.init(Cipher.DECRYPT_MODE, secretKey, ccmParameterSpec);
byte[] dec = encryptCipherDecrypt.doFinal(enc);


```

